"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WebSocket = require("ws");
/**
 * Takes in config containing controllers for handling
 * inbound requests; returns object with methods for
 * sending outbound requests
 */
exports.listen = (cfg) => {
    const server = new WebSocket.Server({ port: cfg.port });
    const peerSockets = [];
    let messageHandler;
    const newPeersFn = (newPeers) => {
        if (peerSockets.length >= cfg.maxPeers) {
            return;
        }
        const connectedPeerUrls = peerSockets.map((ws) => ws.url);
        const newUrls = newPeers.filter((url) => !connectedPeerUrls.includes(url));
        newUrls.forEach((url) => {
            const peerSocket = new WebSocket(`ws://${url}`);
            peerSocket.on('open', () => {
                peerSocket.on('message', messageHandler);
                sendChain(peerSocket, cfg.chain);
            });
            peerSocket.on('error', (err) => {
                // tslint:disable-next-line no-any
                if (err.code === 'ECONNREFUSED') {
                    console.log('Failed to connect to peer');
                    setTimeout(() => newPeersFn([url]), 5000);
                }
            });
            peerSockets.push(peerSocket);
        });
    };
    messageHandler = getMessageHandler(cfg, newPeersFn);
    // when a peer connects inbound
    server.on('connection', (ws) => {
        ws.on('message', messageHandler);
        sendChain(ws, cfg.chain);
        broadcastMessage([ws], { data: peerSockets.map((s) => s.url), type: "peers" /* peers */ });
        peerSockets.push(ws);
    });
    // connect to known peers on startup
    newPeersFn(cfg.knownPeers);
    // return the outbound API
    return {
        broadcastTransaction(data) {
            broadcastMessage(peerSockets, { data, type: "transaction" /* transaction */ });
        },
        broadcastChain() {
            const { chain: data } = cfg;
            broadcastMessage(peerSockets, { data, type: "chain" /* chain */ });
        },
    };
};
function broadcastMessage(peers, msg) {
    const serialized = JSON.stringify(msg);
    peers.forEach((ws) => {
        ws.send(serialized);
    });
}
function getMessageHandler(cfg, newPeersCallback) {
    return (msg) => {
        const p2pMessage = JSON.parse(msg.toString());
        switch (p2pMessage.type) {
            case "chain" /* chain */: {
                return cfg.controllers.newChain(p2pMessage.data);
            }
            case "transaction" /* transaction */: {
                return cfg.controllers.newTransaction(p2pMessage.data);
            }
            case "peers" /* peers */: {
                return newPeersCallback(p2pMessage.data);
            }
            default: {
                return;
            }
        }
    };
}
function sendChain(ws, chain) {
    ws.send(JSON.stringify({ data: chain, type: "chain" /* chain */ }));
}
//# sourceMappingURL=data:application/json;base64,