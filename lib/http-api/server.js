"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Koa = require("koa");
const Router = require("@koa/router");
const middleware_1 = require("./middleware");
/**
 * Starts up HTTP API and configures controllers
 */
exports.listen = (cfg, listenCallback) => {
    const app = new Koa();
    const router = new Router();
    // middleware to add the chain to incoming requests
    router.use(middleware_1.getAddChainToContextMiddleware(cfg.chain));
    router.get('/balance', (ctx) => {
        const balance = cfg.controllers.getBalance();
        ctx.body = { balance };
    });
    router.get('/blocks', (ctx) => {
        const blocks = cfg.controllers.getBlocks();
        ctx.body = { blocks };
    });
    router.get('/mempool', (ctx) => {
        const pool = cfg.controllers.getMempool();
        ctx.body = { pool };
    });
    router.get('/address', (ctx) => {
        const address = cfg.controllers.getPublicKey();
        ctx.body = { address };
    });
    router.post('/transaction', middleware_1.getJsonBodyParseMiddleware(), (ctx) => {
        const { destAddress, amount } = ctx.request.body;
        const address = cfg.controllers.getPublicKey();
        if (address === destAddress) {
            return ctx.throw(400, new Error('Cannot send coins to yourself!'));
        }
        try {
            cfg.controllers.sendTransaction(destAddress, amount);
            return ctx.body = { success: true };
        }
        catch (ex) {
            return ctx.throw(400, ex);
        }
    });
    app.use(router.routes());
    app.use(router.allowedMethods());
    const { host, port } = cfg;
    return app.listen(port, host, listenCallback);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2h0dHAtYXBpL3NlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJCQUEyQjtBQUMzQixzQ0FBc0M7QUFFdEMsNkNBQTBGO0FBbUIxRjs7R0FFRztBQUNVLFFBQUEsTUFBTSxHQUFHLENBQUMsR0FBaUIsRUFBRSxjQUEwQixFQUFFLEVBQUU7SUFDdEUsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUV0QixNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBVSxDQUFDO0lBRXBDLG1EQUFtRDtJQUNuRCxNQUFNLENBQUMsR0FBRyxDQUFDLDJDQUE4QixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBRXRELE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDN0IsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUU3QyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUM7SUFDekIsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQzVCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFM0MsR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDO0lBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtRQUM3QixNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRTFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUN0QixDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDN0IsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUUvQyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUM7SUFDekIsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSx1Q0FBMEIsRUFBMkMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ3pHLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFFakQsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUUvQyxJQUFJLE9BQU8sS0FBSyxXQUFXLEVBQUU7WUFDM0IsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDLENBQUM7U0FDcEU7UUFFRCxJQUFJO1lBQ0YsR0FBRyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBRXJELE9BQU8sR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztTQUNyQztRQUNELE9BQU8sRUFBRSxFQUFFO1lBQ1QsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUMzQjtJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUN6QixHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO0lBRWpDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDO0lBRTNCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQ2hELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEtvYSBmcm9tICdrb2EnO1xuaW1wb3J0ICogYXMgUm91dGVyIGZyb20gJ0Brb2Evcm91dGVyJztcblxuaW1wb3J0IHsgZ2V0SnNvbkJvZHlQYXJzZU1pZGRsZXdhcmUsIGdldEFkZENoYWluVG9Db250ZXh0TWlkZGxld2FyZSB9IGZyb20gJy4vbWlkZGxld2FyZSc7XG5pbXBvcnQgeyBCbG9ja2NoYWluLCBCbG9jaywgU2lnbmVkVHJhbnNhY3Rpb24gfSBmcm9tICcuLi9jaGFpbi9pbnRlcmZhY2UnO1xuXG4vKipcbiAqIFNlcnZlciBjb25maWd1cmF0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VydmVyQ29uZmlnIHtcbiAgaG9zdDogc3RyaW5nO1xuICBwb3J0OiBudW1iZXI7XG4gIGNoYWluOiBCbG9ja2NoYWluO1xuICBjb250cm9sbGVyczoge1xuICAgIGdldEJhbGFuY2UoKTogbnVtYmVyO1xuICAgIGdldEJsb2NrcygpOiBCbG9ja1tdO1xuICAgIGdldE1lbXBvb2woKTogU2lnbmVkVHJhbnNhY3Rpb25bXTtcbiAgICBnZXRQdWJsaWNLZXkoKTogc3RyaW5nO1xuICAgIHNlbmRUcmFuc2FjdGlvbihkZXN0OiBzdHJpbmcsIGFtb3VudDogbnVtYmVyKTogdm9pZDtcbiAgfTtcbn1cblxuLyoqXG4gKiBTdGFydHMgdXAgSFRUUCBBUEkgYW5kIGNvbmZpZ3VyZXMgY29udHJvbGxlcnNcbiAqL1xuZXhwb3J0IGNvbnN0IGxpc3RlbiA9IChjZmc6IFNlcnZlckNvbmZpZywgbGlzdGVuQ2FsbGJhY2s6ICgpID0+IHZvaWQpID0+IHtcbiAgY29uc3QgYXBwID0gbmV3IEtvYSgpO1xuXG4gIGNvbnN0IHJvdXRlciA9IG5ldyBSb3V0ZXI8e30sIHt9PigpO1xuXG4gIC8vIG1pZGRsZXdhcmUgdG8gYWRkIHRoZSBjaGFpbiB0byBpbmNvbWluZyByZXF1ZXN0c1xuICByb3V0ZXIudXNlKGdldEFkZENoYWluVG9Db250ZXh0TWlkZGxld2FyZShjZmcuY2hhaW4pKTtcblxuICByb3V0ZXIuZ2V0KCcvYmFsYW5jZScsIChjdHgpID0+IHtcbiAgICBjb25zdCBiYWxhbmNlID0gY2ZnLmNvbnRyb2xsZXJzLmdldEJhbGFuY2UoKTtcblxuICAgIGN0eC5ib2R5ID0geyBiYWxhbmNlIH07XG4gIH0pO1xuXG4gIHJvdXRlci5nZXQoJy9ibG9ja3MnLCAoY3R4KSA9PiB7XG4gICAgY29uc3QgYmxvY2tzID0gY2ZnLmNvbnRyb2xsZXJzLmdldEJsb2NrcygpO1xuXG4gICAgY3R4LmJvZHkgPSB7IGJsb2NrcyB9O1xuICB9KTtcblxuICByb3V0ZXIuZ2V0KCcvbWVtcG9vbCcsIChjdHgpID0+IHtcbiAgICBjb25zdCBwb29sID0gY2ZnLmNvbnRyb2xsZXJzLmdldE1lbXBvb2woKTtcblxuICAgIGN0eC5ib2R5ID0geyBwb29sIH07XG4gIH0pO1xuXG4gIHJvdXRlci5nZXQoJy9hZGRyZXNzJywgKGN0eCkgPT4ge1xuICAgIGNvbnN0IGFkZHJlc3MgPSBjZmcuY29udHJvbGxlcnMuZ2V0UHVibGljS2V5KCk7XG5cbiAgICBjdHguYm9keSA9IHsgYWRkcmVzcyB9O1xuICB9KTtcblxuICByb3V0ZXIucG9zdCgnL3RyYW5zYWN0aW9uJywgZ2V0SnNvbkJvZHlQYXJzZU1pZGRsZXdhcmU8eyBkZXN0QWRkcmVzczogc3RyaW5nOyBhbW91bnQ6IG51bWJlciB9PigpLCAoY3R4KSA9PiB7XG4gICAgY29uc3QgeyBkZXN0QWRkcmVzcywgYW1vdW50IH0gPSBjdHgucmVxdWVzdC5ib2R5O1xuXG4gICAgY29uc3QgYWRkcmVzcyA9IGNmZy5jb250cm9sbGVycy5nZXRQdWJsaWNLZXkoKTtcblxuICAgIGlmIChhZGRyZXNzID09PSBkZXN0QWRkcmVzcykge1xuICAgICAgcmV0dXJuIGN0eC50aHJvdyg0MDAsIG5ldyBFcnJvcignQ2Fubm90IHNlbmQgY29pbnMgdG8geW91cnNlbGYhJykpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjZmcuY29udHJvbGxlcnMuc2VuZFRyYW5zYWN0aW9uKGRlc3RBZGRyZXNzLCBhbW91bnQpO1xuXG4gICAgICByZXR1cm4gY3R4LmJvZHkgPSB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGV4KSB7XG4gICAgICByZXR1cm4gY3R4LnRocm93KDQwMCwgZXgpO1xuICAgIH1cbiAgfSk7XG5cbiAgYXBwLnVzZShyb3V0ZXIucm91dGVzKCkpO1xuICBhcHAudXNlKHJvdXRlci5hbGxvd2VkTWV0aG9kcygpKTtcblxuICBjb25zdCB7IGhvc3QsIHBvcnQgfSA9IGNmZztcblxuICByZXR1cm4gYXBwLmxpc3Rlbihwb3J0LCBob3N0LCBsaXN0ZW5DYWxsYmFjayk7XG59O1xuIl19